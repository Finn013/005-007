
import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, RotateCcw, Trash2, AlertTriangle } from 'lucide-react';
import { Note } from '../types/note';
import { formatDistanceToNow } from 'date-fns';
import { ru } from 'date-fns/locale';

interface TrashPageProps {
  onBack: () => void;
  trashedNotes: Note[];
  onRestore: (noteId: string) => void;
  onDeletePermanently: (noteId: string) => void;
  onEmptyTrash: () => void;
  trashRetentionDays: number;
}

const TrashPage: React.FC<TrashPageProps> = ({
  onBack,
  trashedNotes,
  onRestore,
  onDeletePermanently,
  onEmptyTrash,
  trashRetentionDays
}) => {
  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'note': return '–ó–∞–º–µ—Ç–∫–∞';
      case 'list': return '–°–ø–∏—Å–æ–∫';
      case 'editor': return '–î–æ–∫—É–º–µ–Ω—Ç';
      default: return '–î–æ–∫—É–º–µ–Ω—Ç';
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'note': return 'bg-blue-100 text-blue-800';
      case 'list': return 'bg-green-100 text-green-800';
      case 'editor': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <div className="mb-6">
          <Button variant="outline" onClick={onBack} className="gap-2">
            <ArrowLeft size={16} />
            –ù–∞–∑–∞–¥
          </Button>
        </div>

        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground mb-2">
            –ö–æ—Ä–∑–∏–Ω–∞
          </h1>
          <p className="text-muted-foreground">
            –£–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è {trashRetentionDays === -1 ? '–±–µ—Å—Å—Ä–æ—á–Ω–æ' : `${trashRetentionDays} –¥–Ω.`}
          </p>
        </div>

        {trashedNotes.length > 0 && (
          <div className="mb-4">
            <Button 
              onClick={onEmptyTrash} 
              variant="destructive" 
              className="gap-2"
            >
              <Trash2 size={16} />
              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </Button>
          </div>
        )}

        {trashedNotes.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üóëÔ∏è</div>
            <h2 className="text-xl font-semibold text-foreground mb-2">
              –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            </h2>
            <p className="text-muted-foreground">
              –£–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å
            </p>
          </div>
        ) : (
          <div className="grid gap-4">
            {trashedNotes.map(note => (
              <Card key={note.id} className="border-2 border-red-200">
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-lg">
                        {note.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                      </CardTitle>
                      <div className="flex gap-2 mt-2">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(note.type)}`}>
                          {getTypeLabel(note.type)}
                        </span>
                        {note.deletedAt && (
                          <span className="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs font-medium">
                            –£–¥–∞–ª–µ–Ω–æ {formatDistanceToNow(new Date(note.deletedAt), { addSuffix: true, locale: ru })}
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onRestore(note.id)}
                        className="gap-1"
                      >
                        <RotateCcw size={14} />
                        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => onDeletePermanently(note.id)}
                        className="gap-1"
                      >
                        <Trash2 size={14} />
                        –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <CardDescription className="line-clamp-2">
                    {note.content || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'}
                  </CardDescription>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex gap-2 text-yellow-800">
            <AlertTriangle size={16} className="mt-1 flex-shrink-0" />
            <div className="text-sm">
              <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã —á–µ—Ä–µ–∑ {trashRetentionDays === -1 ? '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è' : `${trashRetentionDays} –¥–Ω–µ–π`}. 
              –í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TrashPage;
